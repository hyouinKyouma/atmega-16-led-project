
32LEDBOX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000145  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d3  00000000  00000000  000002a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000014e  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000169  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  00000655  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 1000000UL
#include <util/delay.h>

int main(void)
{
	DDRA=DDRB=DDRC=DDRD=0XFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
  70:	84 bb       	out	0x14, r24	; 20
  72:	87 bb       	out	0x17, r24	; 23
  74:	8a bb       	out	0x1a, r24	; 26
	PORTA=PORTD=0XFF;
  76:	82 bb       	out	0x12, r24	; 18
  78:	8b bb       	out	0x1b, r24	; 27
	PORTB=PORTC=0X81;
  7a:	81 e8       	ldi	r24, 0x81	; 129
  7c:	85 bb       	out	0x15, r24	; 21
  7e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f e9       	ldi	r18, 0x9F	; 159
  82:	86 e8       	ldi	r24, 0x86	; 134
  84:	91 e0       	ldi	r25, 0x01	; 1
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x1a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x24>
  90:	00 00       	nop
	_delay_ms(500);
    while(1)
    {
		
		PORTA=~PORTA;
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	80 95       	com	r24
  96:	8b bb       	out	0x1b, r24	; 27
		PORTB=~PORTB;
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	80 95       	com	r24
  9c:	88 bb       	out	0x18, r24	; 24
		PORTC=PORTB;
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	85 bb       	out	0x15, r24	; 21
		PORTD=PORTA;
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	82 bb       	out	0x12, r24	; 18
  a6:	2f e9       	ldi	r18, 0x9F	; 159
  a8:	86 e8       	ldi	r24, 0x86	; 134
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x40>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x4a>
  b6:	00 00       	nop
  b8:	ec cf       	rjmp	.-40     	; 0x92 <main+0x26>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
